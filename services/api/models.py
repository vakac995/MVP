# Auto-generated by Lumenary
from pydantic import BaseModel, Field
from typing import List, Optional, Dict, Any, Union, Literal, Annotated, Tuple, Set, Any

from datetime import datetime, date, time, timedelta
from uuid import UUID
import uuid

class TokenExchangeRequest(BaseModel):
    client_id: str
    grant_type: str
    code: Optional[str] = None
    code_verifier: Optional[str] = None

class TokenResponse(BaseModel):
    access_token: str
    token_type: str = "bearer"
    expires_in: int = 3600

class TokenValidationRequest(BaseModel):
    token: str
    
class LogoutResponse(BaseModel):
    success: bool = True

# Import user-defined models that we need for input/response models
from core.project import Project
from core.timeline_item import TimelineItem
from core.vote import Vote
from core.donation import Donation
from core.comment import Comment
from core.user import User
from core.badge import Badge
from core.user_badge import UserBadge
from core.project_badge import ProjectBadge

GetAllProjectsOutputSchema = List[Project]
class BodyProjectServiceGetProjectById(BaseModel):
  project_id: UUID

GetProjectByIdOutputSchema = Optional[Project]
class BodyProjectServiceGetFeaturedProjects(BaseModel):
  limit: int

GetFeaturedProjectsOutputSchema = List[Project]
class BodyProjectServiceSearchProjects(BaseModel):
  query: str

SearchProjectsOutputSchema = List[Project]
class BodyProjectServiceGetProjectsByCategory(BaseModel):
  category: str

GetProjectsByCategoryOutputSchema = List[Project]
class BodyProjectServiceCreateProject(BaseModel):
  title: str
  description: str
  budget: float
  category: str
  tags: List[str]

CreateProjectOutputSchema = Project
class BodyProjectServiceUpdateProject(BaseModel):
  project_id: UUID
  title: str
  description: str
  budget: float
  status: str
  category: str
  tags: List[str]

UpdateProjectOutputSchema = Optional[Project]
class BodyProjectServiceDeleteProject(BaseModel):
  project_id: UUID

DeleteProjectOutputSchema = bool
class BodyProjectServiceGetProjectStatistics(BaseModel):
  project_id: UUID

GetProjectStatisticsOutputSchema = Dict[str, Any]
class BodyVotingServiceVoteForProject(BaseModel):
  project_id: UUID

VoteForProjectOutputSchema = bool
class BodyVotingServiceRemoveVoteForProject(BaseModel):
  project_id: UUID

RemoveVoteForProjectOutputSchema = bool
class BodyVotingServiceHasUserVoted(BaseModel):
  project_id: UUID

HasUserVotedOutputSchema = bool
class BodyVotingServiceGetProjectVoteCount(BaseModel):
  project_id: UUID

GetProjectVoteCountOutputSchema = int
GetUserVotesOutputSchema = List[Vote]
class BodyVotingServiceGetProjectVoters(BaseModel):
  project_id: UUID
  limit: int

GetProjectVotersOutputSchema = List[Vote]
class BodyDonationServiceCreateDonation(BaseModel):
  project_id: UUID
  amount: float
  message: str
  is_anonymous: bool
  currency: str

CreateDonationOutputSchema = Donation
class BodyDonationServiceGetProjectDonations(BaseModel):
  project_id: UUID
  include_anonymous: bool

GetProjectDonationsOutputSchema = List[Donation]
class BodyDonationServiceGetDonationStatistics(BaseModel):
  project_id: UUID

GetDonationStatisticsOutputSchema = Dict[str, Any]
GetUserDonationsOutputSchema = List[Donation]
class BodyDonationServiceGetRecentDonations(BaseModel):
  limit: int

GetRecentDonationsOutputSchema = List[Donation]
class BodyDonationServiceGetTopDonorsForProject(BaseModel):
  project_id: UUID
  limit: int

GetTopDonorsForProjectOutputSchema = List[Dict[str, Any]]
GetUserDonationTotalOutputSchema = float
class BodyTimelineServiceGetProjectTimeline(BaseModel):
  project_id: UUID

GetProjectTimelineOutputSchema = List[TimelineItem]
class BodyTimelineServiceCreateTimelineItem(BaseModel):
  project_id: UUID
  title: str
  description: str
  milestone_type: str
  target_date: Optional[datetime] = None
  order_index: Optional[int] = None

CreateTimelineItemOutputSchema = TimelineItem
class BodyTimelineServiceUpdateTimelineItem(BaseModel):
  timeline_item_id: UUID
  title: str
  description: str
  target_date: Optional[datetime] = None
  is_completed: bool

UpdateTimelineItemOutputSchema = Optional[TimelineItem]
class BodyTimelineServiceDeleteTimelineItem(BaseModel):
  timeline_item_id: UUID

DeleteTimelineItemOutputSchema = bool
class BodyTimelineServiceReorderTimelineItems(BaseModel):
  project_id: UUID
  item_order: List[UUID]

ReorderTimelineItemsOutputSchema = bool
class BodyTimelineServiceGetTimelineItemById(BaseModel):
  timeline_item_id: UUID

GetTimelineItemByIdOutputSchema = Optional[TimelineItem]
class BodyTimelineServiceGetRecentTimelineActivity(BaseModel):
  limit: int

GetRecentTimelineActivityOutputSchema = List[TimelineItem]
class BodyCommentServiceGetProjectComments(BaseModel):
  project_id: UUID

GetProjectCommentsOutputSchema = List[Comment]
class BodyCommentServiceGetTimelineItemComments(BaseModel):
  timeline_item_id: UUID

GetTimelineItemCommentsOutputSchema = List[Comment]
class BodyCommentServiceGetThreadedComments(BaseModel):
  project_id: UUID
  timeline_item_id: Optional[UUID] = None

GetThreadedCommentsOutputSchema = List[Comment]
class BodyCommentServiceCreateComment(BaseModel):
  project_id: UUID
  content: str
  timeline_item_id: Optional[UUID] = None
  parent_comment_id: Optional[UUID] = None

CreateCommentOutputSchema = Comment
class BodyCommentServiceUpdateComment(BaseModel):
  comment_id: UUID
  content: str

UpdateCommentOutputSchema = Optional[Comment]
class BodyCommentServiceDeleteComment(BaseModel):
  comment_id: UUID

DeleteCommentOutputSchema = bool
class BodyCommentServiceGetRecentComments(BaseModel):
  limit: int

GetRecentCommentsOutputSchema = List[Comment]
class BodyCommentServiceGetCommentCountForProject(BaseModel):
  project_id: UUID

GetCommentCountForProjectOutputSchema = int
GetUserCommentsOutputSchema = List[Comment]
class BodyCommentServiceSearchComments(BaseModel):
  query: str
  project_id: Optional[UUID] = None

SearchCommentsOutputSchema = List[Comment]
GetAllBadgesOutputSchema = List[Badge]
class BodyBadgeServiceGetProjectBadges(BaseModel):
  project_id: uuid.UUID

GetProjectBadgesOutputSchema = List[Dict]
class BodyBadgeServiceGetUserBadges(BaseModel):
  user_id: str

GetUserBadgesOutputSchema = List[Dict]
class BodyBadgeServiceSetFeaturedBadge(BaseModel):
  user_id: str
  badge_id: uuid.UUID

SetFeaturedBadgeOutputSchema = UserBadge
RecalculateBadgesOutputSchema = Dict
class BodyRegistrationServiceCheckUsernameAvailability(BaseModel):
  username: str

CheckUsernameAvailabilityOutputSchema = Dict
class BodyRegistrationServiceCheckEmailAvailability(BaseModel):
  email: str

CheckEmailAvailabilityOutputSchema = Dict
class BodyRegistrationServiceValidatePassword(BaseModel):
  password: str

ValidatePasswordOutputSchema = Dict
class BodyRegistrationServiceRegisterUser(BaseModel):
  email: str
  password: str
  username: str
  full_name: Optional[str] = None
  phone_number: Optional[str] = None
  location: Optional[str] = None
  bio: Optional[str] = None
  newsletter_opt_in: bool
  terms_accepted: bool

RegisterUserOutputSchema = Dict
class BodyRegistrationServiceSendVerificationEmail(BaseModel):
  user_id: str

SendVerificationEmailOutputSchema = Dict
class BodyRegistrationServiceVerifyEmail(BaseModel):
  user_id: str
  verification_token: str

VerifyEmailOutputSchema = Dict
GetRegistrationStatsOutputSchema = Dict
class BodyRegistrationServiceUpdateUserProfile(BaseModel):
  user_id: str
  full_name: Optional[str] = None
  phone_number: Optional[str] = None
  location: Optional[str] = None
  bio: Optional[str] = None
  newsletter_opt_in: Optional[bool] = None

UpdateUserProfileOutputSchema = Dict
    