// This file is auto-generated by @hey-api/openapi-ts

export type Badge = {
    id?: string;
    name: string;
    description: string;
    category: string;
    badge_type: string;
    icon: string;
    color: string;
    criteria_value?: number | null;
    is_active?: boolean;
    created_at?: string;
    criteria_projects?: number | null;
    criteria_votes?: number | null;
    criteria_donations?: number | null;
    criteria_comments?: number | null;
};

export type BodyBadgeServiceGetProjectBadges = {
    project_id: string;
};

export type BodyBadgeServiceGetUserBadges = {
    user_id: string;
};

export type BodyBadgeServiceSetFeaturedBadge = {
    user_id: string;
    badge_id: string;
};

export type BodyCommentServiceCreateComment = {
    project_id: string;
    content: string;
    timeline_item_id?: string | null;
    parent_comment_id?: string | null;
};

export type BodyCommentServiceDeleteComment = {
    comment_id: string;
};

export type BodyCommentServiceGetCommentCountForProject = {
    project_id: string;
};

export type BodyCommentServiceGetProjectComments = {
    project_id: string;
};

export type BodyCommentServiceGetRecentComments = {
    limit: number;
};

export type BodyCommentServiceGetThreadedComments = {
    project_id: string;
    timeline_item_id?: string | null;
};

export type BodyCommentServiceGetTimelineItemComments = {
    timeline_item_id: string;
};

export type BodyCommentServiceSearchComments = {
    query: string;
    project_id?: string | null;
};

export type BodyCommentServiceUpdateComment = {
    comment_id: string;
    content: string;
};

export type BodyDonationServiceCreateDonation = {
    project_id: string;
    amount: number;
    message: string;
    is_anonymous: boolean;
    currency: string;
};

export type BodyDonationServiceGetDonationStatistics = {
    project_id: string;
};

export type BodyDonationServiceGetProjectDonations = {
    project_id: string;
    include_anonymous: boolean;
};

export type BodyDonationServiceGetRecentDonations = {
    limit: number;
};

export type BodyDonationServiceGetTopDonorsForProject = {
    project_id: string;
    limit: number;
};

export type BodyProjectServiceCreateProject = {
    title: string;
    description: string;
    budget: number;
    category: string;
    tags: Array<string>;
};

export type BodyProjectServiceDeleteProject = {
    project_id: string;
};

export type BodyProjectServiceGetFeaturedProjects = {
    limit: number;
};

export type BodyProjectServiceGetProjectById = {
    project_id: string;
};

export type BodyProjectServiceGetProjectStatistics = {
    project_id: string;
};

export type BodyProjectServiceGetProjectsByCategory = {
    category: string;
};

export type BodyProjectServiceSearchProjects = {
    query: string;
};

export type BodyProjectServiceUpdateProject = {
    project_id: string;
    title: string;
    description: string;
    budget: number;
    status: string;
    category: string;
    tags: Array<string>;
};

export type BodyRegistrationServiceCheckEmailAvailability = {
    email: string;
};

export type BodyRegistrationServiceCheckUsernameAvailability = {
    username: string;
};

export type BodyRegistrationServiceRegisterUser = {
    email: string;
    password: string;
    username: string;
    full_name?: string | null;
    phone_number?: string | null;
    location?: string | null;
    bio?: string | null;
    newsletter_opt_in: boolean;
    terms_accepted: boolean;
};

export type BodyRegistrationServiceSendVerificationEmail = {
    user_id: string;
};

export type BodyRegistrationServiceUpdateUserProfile = {
    user_id: string;
    full_name?: string | null;
    phone_number?: string | null;
    location?: string | null;
    bio?: string | null;
    newsletter_opt_in?: boolean | null;
};

export type BodyRegistrationServiceValidatePassword = {
    password: string;
};

export type BodyRegistrationServiceVerifyEmail = {
    user_id: string;
    verification_token: string;
};

export type BodyTimelineServiceCreateTimelineItem = {
    project_id: string;
    title: string;
    description: string;
    milestone_type: string;
    target_date?: string | null;
    order_index?: number | null;
};

export type BodyTimelineServiceDeleteTimelineItem = {
    timeline_item_id: string;
};

export type BodyTimelineServiceGetProjectTimeline = {
    project_id: string;
};

export type BodyTimelineServiceGetRecentTimelineActivity = {
    limit: number;
};

export type BodyTimelineServiceGetTimelineItemById = {
    timeline_item_id: string;
};

export type BodyTimelineServiceReorderTimelineItems = {
    project_id: string;
    item_order: Array<string>;
};

export type BodyTimelineServiceUpdateTimelineItem = {
    timeline_item_id: string;
    title: string;
    description: string;
    target_date?: string | null;
    is_completed: boolean;
};

export type BodyVotingServiceGetProjectVoteCount = {
    project_id: string;
};

export type BodyVotingServiceGetProjectVoters = {
    project_id: string;
    limit: number;
};

export type BodyVotingServiceHasUserVoted = {
    project_id: string;
};

export type BodyVotingServiceRemoveVoteForProject = {
    project_id: string;
};

export type BodyVotingServiceVoteForProject = {
    project_id: string;
};

export type Comment = {
    id?: string;
    user_id: string;
    project_id: string;
    timeline_item_id?: string | null;
    parent_comment_id?: string | null;
    content: string;
    created_at?: string;
    updated_at?: string;
};

export type Donation = {
    id?: string;
    user_id: string;
    project_id: string;
    amount: number;
    currency?: string;
    message?: string;
    is_anonymous?: boolean;
    created_at?: string;
};

export type HttpValidationError = {
    detail?: Array<ValidationError>;
};

export type Project = {
    id?: string;
    user_id: string;
    title: string;
    description: string;
    status: string;
    budget: number;
    current_funding?: number;
    vote_count?: number;
    category: string;
    tags?: Array<string>;
    created_at?: string;
    updated_at?: string;
};

export type TimelineItem = {
    id?: string;
    project_id: string;
    user_id: string;
    title: string;
    description: string;
    milestone_type: string;
    target_date?: string | null;
    completed_date?: string | null;
    is_completed?: boolean;
    order_index: number;
    created_at?: string;
};

export type UserBadge = {
    id?: string;
    user_id: string;
    badge_id: string;
    earned_at?: string;
    context_project_id?: string | null;
    context_value?: number | null;
    is_featured?: boolean;
    progress_value?: number | null;
    progress_updated?: string | null;
};

export type ValidationError = {
    loc: Array<string | number>;
    msg: string;
    type: string;
};

export type Vote = {
    id?: string;
    user_id: string;
    project_id: string;
    created_at?: string;
};

export type ProjectServiceGetAllProjectsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/project_service/get_all_projects';
};

export type ProjectServiceGetAllProjectsResponses = {
    /**
     * Successful Response
     */
    200: Array<Project>;
};

export type ProjectServiceGetAllProjectsResponse = ProjectServiceGetAllProjectsResponses[keyof ProjectServiceGetAllProjectsResponses];

export type ProjectServiceGetProjectByIdData = {
    body: BodyProjectServiceGetProjectById;
    path?: never;
    query?: never;
    url: '/api/project_service/get_project_by_id';
};

export type ProjectServiceGetProjectByIdErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ProjectServiceGetProjectByIdError = ProjectServiceGetProjectByIdErrors[keyof ProjectServiceGetProjectByIdErrors];

export type ProjectServiceGetProjectByIdResponses = {
    /**
     * Successful Response
     */
    200: Project | null;
};

export type ProjectServiceGetProjectByIdResponse = ProjectServiceGetProjectByIdResponses[keyof ProjectServiceGetProjectByIdResponses];

export type ProjectServiceGetFeaturedProjectsData = {
    body: BodyProjectServiceGetFeaturedProjects;
    path?: never;
    query?: never;
    url: '/api/project_service/get_featured_projects';
};

export type ProjectServiceGetFeaturedProjectsErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ProjectServiceGetFeaturedProjectsError = ProjectServiceGetFeaturedProjectsErrors[keyof ProjectServiceGetFeaturedProjectsErrors];

export type ProjectServiceGetFeaturedProjectsResponses = {
    /**
     * Successful Response
     */
    200: Array<Project>;
};

export type ProjectServiceGetFeaturedProjectsResponse = ProjectServiceGetFeaturedProjectsResponses[keyof ProjectServiceGetFeaturedProjectsResponses];

export type ProjectServiceSearchProjectsData = {
    body: BodyProjectServiceSearchProjects;
    path?: never;
    query?: never;
    url: '/api/project_service/search_projects';
};

export type ProjectServiceSearchProjectsErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ProjectServiceSearchProjectsError = ProjectServiceSearchProjectsErrors[keyof ProjectServiceSearchProjectsErrors];

export type ProjectServiceSearchProjectsResponses = {
    /**
     * Successful Response
     */
    200: Array<Project>;
};

export type ProjectServiceSearchProjectsResponse = ProjectServiceSearchProjectsResponses[keyof ProjectServiceSearchProjectsResponses];

export type ProjectServiceGetProjectsByCategoryData = {
    body: BodyProjectServiceGetProjectsByCategory;
    path?: never;
    query?: never;
    url: '/api/project_service/get_projects_by_category';
};

export type ProjectServiceGetProjectsByCategoryErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ProjectServiceGetProjectsByCategoryError = ProjectServiceGetProjectsByCategoryErrors[keyof ProjectServiceGetProjectsByCategoryErrors];

export type ProjectServiceGetProjectsByCategoryResponses = {
    /**
     * Successful Response
     */
    200: Array<Project>;
};

export type ProjectServiceGetProjectsByCategoryResponse = ProjectServiceGetProjectsByCategoryResponses[keyof ProjectServiceGetProjectsByCategoryResponses];

export type ProjectServiceCreateProjectData = {
    body: BodyProjectServiceCreateProject;
    path?: never;
    query?: never;
    url: '/api/project_service/create_project';
};

export type ProjectServiceCreateProjectErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ProjectServiceCreateProjectError = ProjectServiceCreateProjectErrors[keyof ProjectServiceCreateProjectErrors];

export type ProjectServiceCreateProjectResponses = {
    /**
     * Successful Response
     */
    200: Project;
};

export type ProjectServiceCreateProjectResponse = ProjectServiceCreateProjectResponses[keyof ProjectServiceCreateProjectResponses];

export type ProjectServiceUpdateProjectData = {
    body: BodyProjectServiceUpdateProject;
    path?: never;
    query?: never;
    url: '/api/project_service/update_project';
};

export type ProjectServiceUpdateProjectErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ProjectServiceUpdateProjectError = ProjectServiceUpdateProjectErrors[keyof ProjectServiceUpdateProjectErrors];

export type ProjectServiceUpdateProjectResponses = {
    /**
     * Successful Response
     */
    200: Project | null;
};

export type ProjectServiceUpdateProjectResponse = ProjectServiceUpdateProjectResponses[keyof ProjectServiceUpdateProjectResponses];

export type ProjectServiceDeleteProjectData = {
    body: BodyProjectServiceDeleteProject;
    path?: never;
    query?: never;
    url: '/api/project_service/delete_project';
};

export type ProjectServiceDeleteProjectErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ProjectServiceDeleteProjectError = ProjectServiceDeleteProjectErrors[keyof ProjectServiceDeleteProjectErrors];

export type ProjectServiceDeleteProjectResponses = {
    /**
     * Successful Response
     */
    200: boolean;
};

export type ProjectServiceDeleteProjectResponse = ProjectServiceDeleteProjectResponses[keyof ProjectServiceDeleteProjectResponses];

export type ProjectServiceGetProjectStatisticsData = {
    body: BodyProjectServiceGetProjectStatistics;
    path?: never;
    query?: never;
    url: '/api/project_service/get_project_statistics';
};

export type ProjectServiceGetProjectStatisticsErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ProjectServiceGetProjectStatisticsError = ProjectServiceGetProjectStatisticsErrors[keyof ProjectServiceGetProjectStatisticsErrors];

export type ProjectServiceGetProjectStatisticsResponses = {
    /**
     * Successful Response
     */
    200: {
        [key: string]: unknown;
    };
};

export type ProjectServiceGetProjectStatisticsResponse = ProjectServiceGetProjectStatisticsResponses[keyof ProjectServiceGetProjectStatisticsResponses];

export type VotingServiceVoteForProjectData = {
    body: BodyVotingServiceVoteForProject;
    path?: never;
    query?: never;
    url: '/api/voting_service/vote_for_project';
};

export type VotingServiceVoteForProjectErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type VotingServiceVoteForProjectError = VotingServiceVoteForProjectErrors[keyof VotingServiceVoteForProjectErrors];

export type VotingServiceVoteForProjectResponses = {
    /**
     * Successful Response
     */
    200: boolean;
};

export type VotingServiceVoteForProjectResponse = VotingServiceVoteForProjectResponses[keyof VotingServiceVoteForProjectResponses];

export type VotingServiceRemoveVoteForProjectData = {
    body: BodyVotingServiceRemoveVoteForProject;
    path?: never;
    query?: never;
    url: '/api/voting_service/remove_vote_for_project';
};

export type VotingServiceRemoveVoteForProjectErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type VotingServiceRemoveVoteForProjectError = VotingServiceRemoveVoteForProjectErrors[keyof VotingServiceRemoveVoteForProjectErrors];

export type VotingServiceRemoveVoteForProjectResponses = {
    /**
     * Successful Response
     */
    200: boolean;
};

export type VotingServiceRemoveVoteForProjectResponse = VotingServiceRemoveVoteForProjectResponses[keyof VotingServiceRemoveVoteForProjectResponses];

export type VotingServiceHasUserVotedData = {
    body: BodyVotingServiceHasUserVoted;
    path?: never;
    query?: never;
    url: '/api/voting_service/has_user_voted';
};

export type VotingServiceHasUserVotedErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type VotingServiceHasUserVotedError = VotingServiceHasUserVotedErrors[keyof VotingServiceHasUserVotedErrors];

export type VotingServiceHasUserVotedResponses = {
    /**
     * Successful Response
     */
    200: boolean;
};

export type VotingServiceHasUserVotedResponse = VotingServiceHasUserVotedResponses[keyof VotingServiceHasUserVotedResponses];

export type VotingServiceGetProjectVoteCountData = {
    body: BodyVotingServiceGetProjectVoteCount;
    path?: never;
    query?: never;
    url: '/api/voting_service/get_project_vote_count';
};

export type VotingServiceGetProjectVoteCountErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type VotingServiceGetProjectVoteCountError = VotingServiceGetProjectVoteCountErrors[keyof VotingServiceGetProjectVoteCountErrors];

export type VotingServiceGetProjectVoteCountResponses = {
    /**
     * Successful Response
     */
    200: number;
};

export type VotingServiceGetProjectVoteCountResponse = VotingServiceGetProjectVoteCountResponses[keyof VotingServiceGetProjectVoteCountResponses];

export type VotingServiceGetUserVotesData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/voting_service/get_user_votes';
};

export type VotingServiceGetUserVotesResponses = {
    /**
     * Successful Response
     */
    200: Array<Vote>;
};

export type VotingServiceGetUserVotesResponse = VotingServiceGetUserVotesResponses[keyof VotingServiceGetUserVotesResponses];

export type VotingServiceGetProjectVotersData = {
    body: BodyVotingServiceGetProjectVoters;
    path?: never;
    query?: never;
    url: '/api/voting_service/get_project_voters';
};

export type VotingServiceGetProjectVotersErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type VotingServiceGetProjectVotersError = VotingServiceGetProjectVotersErrors[keyof VotingServiceGetProjectVotersErrors];

export type VotingServiceGetProjectVotersResponses = {
    /**
     * Successful Response
     */
    200: Array<Vote>;
};

export type VotingServiceGetProjectVotersResponse = VotingServiceGetProjectVotersResponses[keyof VotingServiceGetProjectVotersResponses];

export type DonationServiceCreateDonationData = {
    body: BodyDonationServiceCreateDonation;
    path?: never;
    query?: never;
    url: '/api/donation_service/create_donation';
};

export type DonationServiceCreateDonationErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DonationServiceCreateDonationError = DonationServiceCreateDonationErrors[keyof DonationServiceCreateDonationErrors];

export type DonationServiceCreateDonationResponses = {
    /**
     * Successful Response
     */
    200: Donation;
};

export type DonationServiceCreateDonationResponse = DonationServiceCreateDonationResponses[keyof DonationServiceCreateDonationResponses];

export type DonationServiceGetProjectDonationsData = {
    body: BodyDonationServiceGetProjectDonations;
    path?: never;
    query?: never;
    url: '/api/donation_service/get_project_donations';
};

export type DonationServiceGetProjectDonationsErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DonationServiceGetProjectDonationsError = DonationServiceGetProjectDonationsErrors[keyof DonationServiceGetProjectDonationsErrors];

export type DonationServiceGetProjectDonationsResponses = {
    /**
     * Successful Response
     */
    200: Array<Donation>;
};

export type DonationServiceGetProjectDonationsResponse = DonationServiceGetProjectDonationsResponses[keyof DonationServiceGetProjectDonationsResponses];

export type DonationServiceGetDonationStatisticsData = {
    body: BodyDonationServiceGetDonationStatistics;
    path?: never;
    query?: never;
    url: '/api/donation_service/get_donation_statistics';
};

export type DonationServiceGetDonationStatisticsErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DonationServiceGetDonationStatisticsError = DonationServiceGetDonationStatisticsErrors[keyof DonationServiceGetDonationStatisticsErrors];

export type DonationServiceGetDonationStatisticsResponses = {
    /**
     * Successful Response
     */
    200: {
        [key: string]: unknown;
    };
};

export type DonationServiceGetDonationStatisticsResponse = DonationServiceGetDonationStatisticsResponses[keyof DonationServiceGetDonationStatisticsResponses];

export type DonationServiceGetUserDonationsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/donation_service/get_user_donations';
};

export type DonationServiceGetUserDonationsResponses = {
    /**
     * Successful Response
     */
    200: Array<Donation>;
};

export type DonationServiceGetUserDonationsResponse = DonationServiceGetUserDonationsResponses[keyof DonationServiceGetUserDonationsResponses];

export type DonationServiceGetRecentDonationsData = {
    body: BodyDonationServiceGetRecentDonations;
    path?: never;
    query?: never;
    url: '/api/donation_service/get_recent_donations';
};

export type DonationServiceGetRecentDonationsErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DonationServiceGetRecentDonationsError = DonationServiceGetRecentDonationsErrors[keyof DonationServiceGetRecentDonationsErrors];

export type DonationServiceGetRecentDonationsResponses = {
    /**
     * Successful Response
     */
    200: Array<Donation>;
};

export type DonationServiceGetRecentDonationsResponse = DonationServiceGetRecentDonationsResponses[keyof DonationServiceGetRecentDonationsResponses];

export type DonationServiceGetTopDonorsForProjectData = {
    body: BodyDonationServiceGetTopDonorsForProject;
    path?: never;
    query?: never;
    url: '/api/donation_service/get_top_donors_for_project';
};

export type DonationServiceGetTopDonorsForProjectErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DonationServiceGetTopDonorsForProjectError = DonationServiceGetTopDonorsForProjectErrors[keyof DonationServiceGetTopDonorsForProjectErrors];

export type DonationServiceGetTopDonorsForProjectResponses = {
    /**
     * Successful Response
     */
    200: Array<{
        [key: string]: unknown;
    }>;
};

export type DonationServiceGetTopDonorsForProjectResponse = DonationServiceGetTopDonorsForProjectResponses[keyof DonationServiceGetTopDonorsForProjectResponses];

export type DonationServiceGetUserDonationTotalData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/donation_service/get_user_donation_total';
};

export type DonationServiceGetUserDonationTotalResponses = {
    /**
     * Successful Response
     */
    200: number;
};

export type DonationServiceGetUserDonationTotalResponse = DonationServiceGetUserDonationTotalResponses[keyof DonationServiceGetUserDonationTotalResponses];

export type TimelineServiceGetProjectTimelineData = {
    body: BodyTimelineServiceGetProjectTimeline;
    path?: never;
    query?: never;
    url: '/api/timeline_service/get_project_timeline';
};

export type TimelineServiceGetProjectTimelineErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type TimelineServiceGetProjectTimelineError = TimelineServiceGetProjectTimelineErrors[keyof TimelineServiceGetProjectTimelineErrors];

export type TimelineServiceGetProjectTimelineResponses = {
    /**
     * Successful Response
     */
    200: Array<TimelineItem>;
};

export type TimelineServiceGetProjectTimelineResponse = TimelineServiceGetProjectTimelineResponses[keyof TimelineServiceGetProjectTimelineResponses];

export type TimelineServiceCreateTimelineItemData = {
    body: BodyTimelineServiceCreateTimelineItem;
    path?: never;
    query?: never;
    url: '/api/timeline_service/create_timeline_item';
};

export type TimelineServiceCreateTimelineItemErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type TimelineServiceCreateTimelineItemError = TimelineServiceCreateTimelineItemErrors[keyof TimelineServiceCreateTimelineItemErrors];

export type TimelineServiceCreateTimelineItemResponses = {
    /**
     * Successful Response
     */
    200: TimelineItem;
};

export type TimelineServiceCreateTimelineItemResponse = TimelineServiceCreateTimelineItemResponses[keyof TimelineServiceCreateTimelineItemResponses];

export type TimelineServiceUpdateTimelineItemData = {
    body: BodyTimelineServiceUpdateTimelineItem;
    path?: never;
    query?: never;
    url: '/api/timeline_service/update_timeline_item';
};

export type TimelineServiceUpdateTimelineItemErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type TimelineServiceUpdateTimelineItemError = TimelineServiceUpdateTimelineItemErrors[keyof TimelineServiceUpdateTimelineItemErrors];

export type TimelineServiceUpdateTimelineItemResponses = {
    /**
     * Successful Response
     */
    200: TimelineItem | null;
};

export type TimelineServiceUpdateTimelineItemResponse = TimelineServiceUpdateTimelineItemResponses[keyof TimelineServiceUpdateTimelineItemResponses];

export type TimelineServiceDeleteTimelineItemData = {
    body: BodyTimelineServiceDeleteTimelineItem;
    path?: never;
    query?: never;
    url: '/api/timeline_service/delete_timeline_item';
};

export type TimelineServiceDeleteTimelineItemErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type TimelineServiceDeleteTimelineItemError = TimelineServiceDeleteTimelineItemErrors[keyof TimelineServiceDeleteTimelineItemErrors];

export type TimelineServiceDeleteTimelineItemResponses = {
    /**
     * Successful Response
     */
    200: boolean;
};

export type TimelineServiceDeleteTimelineItemResponse = TimelineServiceDeleteTimelineItemResponses[keyof TimelineServiceDeleteTimelineItemResponses];

export type TimelineServiceReorderTimelineItemsData = {
    body: BodyTimelineServiceReorderTimelineItems;
    path?: never;
    query?: never;
    url: '/api/timeline_service/reorder_timeline_items';
};

export type TimelineServiceReorderTimelineItemsErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type TimelineServiceReorderTimelineItemsError = TimelineServiceReorderTimelineItemsErrors[keyof TimelineServiceReorderTimelineItemsErrors];

export type TimelineServiceReorderTimelineItemsResponses = {
    /**
     * Successful Response
     */
    200: boolean;
};

export type TimelineServiceReorderTimelineItemsResponse = TimelineServiceReorderTimelineItemsResponses[keyof TimelineServiceReorderTimelineItemsResponses];

export type TimelineServiceGetTimelineItemByIdData = {
    body: BodyTimelineServiceGetTimelineItemById;
    path?: never;
    query?: never;
    url: '/api/timeline_service/get_timeline_item_by_id';
};

export type TimelineServiceGetTimelineItemByIdErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type TimelineServiceGetTimelineItemByIdError = TimelineServiceGetTimelineItemByIdErrors[keyof TimelineServiceGetTimelineItemByIdErrors];

export type TimelineServiceGetTimelineItemByIdResponses = {
    /**
     * Successful Response
     */
    200: TimelineItem | null;
};

export type TimelineServiceGetTimelineItemByIdResponse = TimelineServiceGetTimelineItemByIdResponses[keyof TimelineServiceGetTimelineItemByIdResponses];

export type TimelineServiceGetRecentTimelineActivityData = {
    body: BodyTimelineServiceGetRecentTimelineActivity;
    path?: never;
    query?: never;
    url: '/api/timeline_service/get_recent_timeline_activity';
};

export type TimelineServiceGetRecentTimelineActivityErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type TimelineServiceGetRecentTimelineActivityError = TimelineServiceGetRecentTimelineActivityErrors[keyof TimelineServiceGetRecentTimelineActivityErrors];

export type TimelineServiceGetRecentTimelineActivityResponses = {
    /**
     * Successful Response
     */
    200: Array<TimelineItem>;
};

export type TimelineServiceGetRecentTimelineActivityResponse = TimelineServiceGetRecentTimelineActivityResponses[keyof TimelineServiceGetRecentTimelineActivityResponses];

export type CommentServiceGetProjectCommentsData = {
    body: BodyCommentServiceGetProjectComments;
    path?: never;
    query?: never;
    url: '/api/comment_service/get_project_comments';
};

export type CommentServiceGetProjectCommentsErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CommentServiceGetProjectCommentsError = CommentServiceGetProjectCommentsErrors[keyof CommentServiceGetProjectCommentsErrors];

export type CommentServiceGetProjectCommentsResponses = {
    /**
     * Successful Response
     */
    200: Array<Comment>;
};

export type CommentServiceGetProjectCommentsResponse = CommentServiceGetProjectCommentsResponses[keyof CommentServiceGetProjectCommentsResponses];

export type CommentServiceGetTimelineItemCommentsData = {
    body: BodyCommentServiceGetTimelineItemComments;
    path?: never;
    query?: never;
    url: '/api/comment_service/get_timeline_item_comments';
};

export type CommentServiceGetTimelineItemCommentsErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CommentServiceGetTimelineItemCommentsError = CommentServiceGetTimelineItemCommentsErrors[keyof CommentServiceGetTimelineItemCommentsErrors];

export type CommentServiceGetTimelineItemCommentsResponses = {
    /**
     * Successful Response
     */
    200: Array<Comment>;
};

export type CommentServiceGetTimelineItemCommentsResponse = CommentServiceGetTimelineItemCommentsResponses[keyof CommentServiceGetTimelineItemCommentsResponses];

export type CommentServiceGetThreadedCommentsData = {
    body: BodyCommentServiceGetThreadedComments;
    path?: never;
    query?: never;
    url: '/api/comment_service/get_threaded_comments';
};

export type CommentServiceGetThreadedCommentsErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CommentServiceGetThreadedCommentsError = CommentServiceGetThreadedCommentsErrors[keyof CommentServiceGetThreadedCommentsErrors];

export type CommentServiceGetThreadedCommentsResponses = {
    /**
     * Successful Response
     */
    200: Array<Comment>;
};

export type CommentServiceGetThreadedCommentsResponse = CommentServiceGetThreadedCommentsResponses[keyof CommentServiceGetThreadedCommentsResponses];

export type CommentServiceCreateCommentData = {
    body: BodyCommentServiceCreateComment;
    path?: never;
    query?: never;
    url: '/api/comment_service/create_comment';
};

export type CommentServiceCreateCommentErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CommentServiceCreateCommentError = CommentServiceCreateCommentErrors[keyof CommentServiceCreateCommentErrors];

export type CommentServiceCreateCommentResponses = {
    /**
     * Successful Response
     */
    200: Comment;
};

export type CommentServiceCreateCommentResponse = CommentServiceCreateCommentResponses[keyof CommentServiceCreateCommentResponses];

export type CommentServiceUpdateCommentData = {
    body: BodyCommentServiceUpdateComment;
    path?: never;
    query?: never;
    url: '/api/comment_service/update_comment';
};

export type CommentServiceUpdateCommentErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CommentServiceUpdateCommentError = CommentServiceUpdateCommentErrors[keyof CommentServiceUpdateCommentErrors];

export type CommentServiceUpdateCommentResponses = {
    /**
     * Successful Response
     */
    200: Comment | null;
};

export type CommentServiceUpdateCommentResponse = CommentServiceUpdateCommentResponses[keyof CommentServiceUpdateCommentResponses];

export type CommentServiceDeleteCommentData = {
    body: BodyCommentServiceDeleteComment;
    path?: never;
    query?: never;
    url: '/api/comment_service/delete_comment';
};

export type CommentServiceDeleteCommentErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CommentServiceDeleteCommentError = CommentServiceDeleteCommentErrors[keyof CommentServiceDeleteCommentErrors];

export type CommentServiceDeleteCommentResponses = {
    /**
     * Successful Response
     */
    200: boolean;
};

export type CommentServiceDeleteCommentResponse = CommentServiceDeleteCommentResponses[keyof CommentServiceDeleteCommentResponses];

export type CommentServiceGetRecentCommentsData = {
    body: BodyCommentServiceGetRecentComments;
    path?: never;
    query?: never;
    url: '/api/comment_service/get_recent_comments';
};

export type CommentServiceGetRecentCommentsErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CommentServiceGetRecentCommentsError = CommentServiceGetRecentCommentsErrors[keyof CommentServiceGetRecentCommentsErrors];

export type CommentServiceGetRecentCommentsResponses = {
    /**
     * Successful Response
     */
    200: Array<Comment>;
};

export type CommentServiceGetRecentCommentsResponse = CommentServiceGetRecentCommentsResponses[keyof CommentServiceGetRecentCommentsResponses];

export type CommentServiceGetCommentCountForProjectData = {
    body: BodyCommentServiceGetCommentCountForProject;
    path?: never;
    query?: never;
    url: '/api/comment_service/get_comment_count_for_project';
};

export type CommentServiceGetCommentCountForProjectErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CommentServiceGetCommentCountForProjectError = CommentServiceGetCommentCountForProjectErrors[keyof CommentServiceGetCommentCountForProjectErrors];

export type CommentServiceGetCommentCountForProjectResponses = {
    /**
     * Successful Response
     */
    200: number;
};

export type CommentServiceGetCommentCountForProjectResponse = CommentServiceGetCommentCountForProjectResponses[keyof CommentServiceGetCommentCountForProjectResponses];

export type CommentServiceGetUserCommentsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/comment_service/get_user_comments';
};

export type CommentServiceGetUserCommentsResponses = {
    /**
     * Successful Response
     */
    200: Array<Comment>;
};

export type CommentServiceGetUserCommentsResponse = CommentServiceGetUserCommentsResponses[keyof CommentServiceGetUserCommentsResponses];

export type CommentServiceSearchCommentsData = {
    body: BodyCommentServiceSearchComments;
    path?: never;
    query?: never;
    url: '/api/comment_service/search_comments';
};

export type CommentServiceSearchCommentsErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CommentServiceSearchCommentsError = CommentServiceSearchCommentsErrors[keyof CommentServiceSearchCommentsErrors];

export type CommentServiceSearchCommentsResponses = {
    /**
     * Successful Response
     */
    200: Array<Comment>;
};

export type CommentServiceSearchCommentsResponse = CommentServiceSearchCommentsResponses[keyof CommentServiceSearchCommentsResponses];

export type BadgeServiceGetAllBadgesData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/badge_service/get_all_badges';
};

export type BadgeServiceGetAllBadgesResponses = {
    /**
     * Successful Response
     */
    200: Array<Badge>;
};

export type BadgeServiceGetAllBadgesResponse = BadgeServiceGetAllBadgesResponses[keyof BadgeServiceGetAllBadgesResponses];

export type BadgeServiceGetProjectBadgesData = {
    body: BodyBadgeServiceGetProjectBadges;
    path?: never;
    query?: never;
    url: '/api/badge_service/get_project_badges';
};

export type BadgeServiceGetProjectBadgesErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type BadgeServiceGetProjectBadgesError = BadgeServiceGetProjectBadgesErrors[keyof BadgeServiceGetProjectBadgesErrors];

export type BadgeServiceGetProjectBadgesResponses = {
    /**
     * Successful Response
     */
    200: Array<{
        [key: string]: unknown;
    }>;
};

export type BadgeServiceGetProjectBadgesResponse = BadgeServiceGetProjectBadgesResponses[keyof BadgeServiceGetProjectBadgesResponses];

export type BadgeServiceGetUserBadgesData = {
    body: BodyBadgeServiceGetUserBadges;
    path?: never;
    query?: never;
    url: '/api/badge_service/get_user_badges';
};

export type BadgeServiceGetUserBadgesErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type BadgeServiceGetUserBadgesError = BadgeServiceGetUserBadgesErrors[keyof BadgeServiceGetUserBadgesErrors];

export type BadgeServiceGetUserBadgesResponses = {
    /**
     * Successful Response
     */
    200: Array<{
        [key: string]: unknown;
    }>;
};

export type BadgeServiceGetUserBadgesResponse = BadgeServiceGetUserBadgesResponses[keyof BadgeServiceGetUserBadgesResponses];

export type BadgeServiceSetFeaturedBadgeData = {
    body: BodyBadgeServiceSetFeaturedBadge;
    path?: never;
    query?: never;
    url: '/api/badge_service/set_featured_badge';
};

export type BadgeServiceSetFeaturedBadgeErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type BadgeServiceSetFeaturedBadgeError = BadgeServiceSetFeaturedBadgeErrors[keyof BadgeServiceSetFeaturedBadgeErrors];

export type BadgeServiceSetFeaturedBadgeResponses = {
    /**
     * Successful Response
     */
    200: UserBadge;
};

export type BadgeServiceSetFeaturedBadgeResponse = BadgeServiceSetFeaturedBadgeResponses[keyof BadgeServiceSetFeaturedBadgeResponses];

export type BadgeServiceRecalculateBadgesData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/badge_service/recalculate_badges';
};

export type BadgeServiceRecalculateBadgesResponses = {
    /**
     * Successful Response
     */
    200: {
        [key: string]: unknown;
    };
};

export type BadgeServiceRecalculateBadgesResponse = BadgeServiceRecalculateBadgesResponses[keyof BadgeServiceRecalculateBadgesResponses];

export type RegistrationServiceCheckUsernameAvailabilityData = {
    body: BodyRegistrationServiceCheckUsernameAvailability;
    path?: never;
    query?: never;
    url: '/api/registration_service/check_username_availability';
};

export type RegistrationServiceCheckUsernameAvailabilityErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type RegistrationServiceCheckUsernameAvailabilityError = RegistrationServiceCheckUsernameAvailabilityErrors[keyof RegistrationServiceCheckUsernameAvailabilityErrors];

export type RegistrationServiceCheckUsernameAvailabilityResponses = {
    /**
     * Successful Response
     */
    200: {
        [key: string]: unknown;
    };
};

export type RegistrationServiceCheckUsernameAvailabilityResponse = RegistrationServiceCheckUsernameAvailabilityResponses[keyof RegistrationServiceCheckUsernameAvailabilityResponses];

export type RegistrationServiceCheckEmailAvailabilityData = {
    body: BodyRegistrationServiceCheckEmailAvailability;
    path?: never;
    query?: never;
    url: '/api/registration_service/check_email_availability';
};

export type RegistrationServiceCheckEmailAvailabilityErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type RegistrationServiceCheckEmailAvailabilityError = RegistrationServiceCheckEmailAvailabilityErrors[keyof RegistrationServiceCheckEmailAvailabilityErrors];

export type RegistrationServiceCheckEmailAvailabilityResponses = {
    /**
     * Successful Response
     */
    200: {
        [key: string]: unknown;
    };
};

export type RegistrationServiceCheckEmailAvailabilityResponse = RegistrationServiceCheckEmailAvailabilityResponses[keyof RegistrationServiceCheckEmailAvailabilityResponses];

export type RegistrationServiceValidatePasswordData = {
    body: BodyRegistrationServiceValidatePassword;
    path?: never;
    query?: never;
    url: '/api/registration_service/validate_password';
};

export type RegistrationServiceValidatePasswordErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type RegistrationServiceValidatePasswordError = RegistrationServiceValidatePasswordErrors[keyof RegistrationServiceValidatePasswordErrors];

export type RegistrationServiceValidatePasswordResponses = {
    /**
     * Successful Response
     */
    200: {
        [key: string]: unknown;
    };
};

export type RegistrationServiceValidatePasswordResponse = RegistrationServiceValidatePasswordResponses[keyof RegistrationServiceValidatePasswordResponses];

export type RegistrationServiceRegisterUserData = {
    body: BodyRegistrationServiceRegisterUser;
    path?: never;
    query?: never;
    url: '/api/registration_service/register_user';
};

export type RegistrationServiceRegisterUserErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type RegistrationServiceRegisterUserError = RegistrationServiceRegisterUserErrors[keyof RegistrationServiceRegisterUserErrors];

export type RegistrationServiceRegisterUserResponses = {
    /**
     * Successful Response
     */
    200: {
        [key: string]: unknown;
    };
};

export type RegistrationServiceRegisterUserResponse = RegistrationServiceRegisterUserResponses[keyof RegistrationServiceRegisterUserResponses];

export type RegistrationServiceSendVerificationEmailData = {
    body: BodyRegistrationServiceSendVerificationEmail;
    path?: never;
    query?: never;
    url: '/api/registration_service/send_verification_email';
};

export type RegistrationServiceSendVerificationEmailErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type RegistrationServiceSendVerificationEmailError = RegistrationServiceSendVerificationEmailErrors[keyof RegistrationServiceSendVerificationEmailErrors];

export type RegistrationServiceSendVerificationEmailResponses = {
    /**
     * Successful Response
     */
    200: {
        [key: string]: unknown;
    };
};

export type RegistrationServiceSendVerificationEmailResponse = RegistrationServiceSendVerificationEmailResponses[keyof RegistrationServiceSendVerificationEmailResponses];

export type RegistrationServiceVerifyEmailData = {
    body: BodyRegistrationServiceVerifyEmail;
    path?: never;
    query?: never;
    url: '/api/registration_service/verify_email';
};

export type RegistrationServiceVerifyEmailErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type RegistrationServiceVerifyEmailError = RegistrationServiceVerifyEmailErrors[keyof RegistrationServiceVerifyEmailErrors];

export type RegistrationServiceVerifyEmailResponses = {
    /**
     * Successful Response
     */
    200: {
        [key: string]: unknown;
    };
};

export type RegistrationServiceVerifyEmailResponse = RegistrationServiceVerifyEmailResponses[keyof RegistrationServiceVerifyEmailResponses];

export type RegistrationServiceGetRegistrationStatsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/registration_service/get_registration_stats';
};

export type RegistrationServiceGetRegistrationStatsResponses = {
    /**
     * Successful Response
     */
    200: {
        [key: string]: unknown;
    };
};

export type RegistrationServiceGetRegistrationStatsResponse = RegistrationServiceGetRegistrationStatsResponses[keyof RegistrationServiceGetRegistrationStatsResponses];

export type RegistrationServiceUpdateUserProfileData = {
    body: BodyRegistrationServiceUpdateUserProfile;
    path?: never;
    query?: never;
    url: '/api/registration_service/update_user_profile';
};

export type RegistrationServiceUpdateUserProfileErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type RegistrationServiceUpdateUserProfileError = RegistrationServiceUpdateUserProfileErrors[keyof RegistrationServiceUpdateUserProfileErrors];

export type RegistrationServiceUpdateUserProfileResponses = {
    /**
     * Successful Response
     */
    200: {
        [key: string]: unknown;
    };
};

export type RegistrationServiceUpdateUserProfileResponse = RegistrationServiceUpdateUserProfileResponses[keyof RegistrationServiceUpdateUserProfileResponses];