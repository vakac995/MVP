// This file is auto-generated by @hey-api/openapi-ts

import type { Options } from '@hey-api/client-fetch';
import type { ProjectServiceGetAllProjectsData, ProjectServiceGetAllProjectsResponse, ProjectServiceGetProjectByIdData, ProjectServiceGetProjectByIdResponse, ProjectServiceGetProjectByIdError, ProjectServiceGetFeaturedProjectsData, ProjectServiceGetFeaturedProjectsResponse, ProjectServiceGetFeaturedProjectsError, ProjectServiceSearchProjectsData, ProjectServiceSearchProjectsResponse, ProjectServiceSearchProjectsError, ProjectServiceGetProjectsByCategoryData, ProjectServiceGetProjectsByCategoryResponse, ProjectServiceGetProjectsByCategoryError, ProjectServiceCreateProjectData, ProjectServiceCreateProjectResponse, ProjectServiceCreateProjectError, ProjectServiceUpdateProjectData, ProjectServiceUpdateProjectResponse, ProjectServiceUpdateProjectError, ProjectServiceDeleteProjectData, ProjectServiceDeleteProjectResponse, ProjectServiceDeleteProjectError, ProjectServiceGetProjectStatisticsData, ProjectServiceGetProjectStatisticsResponse, ProjectServiceGetProjectStatisticsError, VotingServiceVoteForProjectData, VotingServiceVoteForProjectResponse, VotingServiceVoteForProjectError, VotingServiceRemoveVoteForProjectData, VotingServiceRemoveVoteForProjectResponse, VotingServiceRemoveVoteForProjectError, VotingServiceHasUserVotedData, VotingServiceHasUserVotedResponse, VotingServiceHasUserVotedError, VotingServiceGetProjectVoteCountData, VotingServiceGetProjectVoteCountResponse, VotingServiceGetProjectVoteCountError, VotingServiceGetUserVotesData, VotingServiceGetUserVotesResponse, VotingServiceGetProjectVotersData, VotingServiceGetProjectVotersResponse, VotingServiceGetProjectVotersError, DonationServiceCreateDonationData, DonationServiceCreateDonationResponse, DonationServiceCreateDonationError, DonationServiceGetProjectDonationsData, DonationServiceGetProjectDonationsResponse, DonationServiceGetProjectDonationsError, DonationServiceGetDonationStatisticsData, DonationServiceGetDonationStatisticsResponse, DonationServiceGetDonationStatisticsError, DonationServiceGetUserDonationsData, DonationServiceGetUserDonationsResponse, DonationServiceGetRecentDonationsData, DonationServiceGetRecentDonationsResponse, DonationServiceGetRecentDonationsError, DonationServiceGetTopDonorsForProjectData, DonationServiceGetTopDonorsForProjectResponse, DonationServiceGetTopDonorsForProjectError, DonationServiceGetUserDonationTotalData, DonationServiceGetUserDonationTotalResponse, TimelineServiceGetProjectTimelineData, TimelineServiceGetProjectTimelineResponse, TimelineServiceGetProjectTimelineError, TimelineServiceCreateTimelineItemData, TimelineServiceCreateTimelineItemResponse, TimelineServiceCreateTimelineItemError, TimelineServiceUpdateTimelineItemData, TimelineServiceUpdateTimelineItemResponse, TimelineServiceUpdateTimelineItemError, TimelineServiceDeleteTimelineItemData, TimelineServiceDeleteTimelineItemResponse, TimelineServiceDeleteTimelineItemError, TimelineServiceReorderTimelineItemsData, TimelineServiceReorderTimelineItemsResponse, TimelineServiceReorderTimelineItemsError, TimelineServiceGetTimelineItemByIdData, TimelineServiceGetTimelineItemByIdResponse, TimelineServiceGetTimelineItemByIdError, TimelineServiceGetRecentTimelineActivityData, TimelineServiceGetRecentTimelineActivityResponse, TimelineServiceGetRecentTimelineActivityError, CommentServiceGetProjectCommentsData, CommentServiceGetProjectCommentsResponse, CommentServiceGetProjectCommentsError, CommentServiceGetTimelineItemCommentsData, CommentServiceGetTimelineItemCommentsResponse, CommentServiceGetTimelineItemCommentsError, CommentServiceGetThreadedCommentsData, CommentServiceGetThreadedCommentsResponse, CommentServiceGetThreadedCommentsError, CommentServiceCreateCommentData, CommentServiceCreateCommentResponse, CommentServiceCreateCommentError, CommentServiceUpdateCommentData, CommentServiceUpdateCommentResponse, CommentServiceUpdateCommentError, CommentServiceDeleteCommentData, CommentServiceDeleteCommentResponse, CommentServiceDeleteCommentError, CommentServiceGetRecentCommentsData, CommentServiceGetRecentCommentsResponse, CommentServiceGetRecentCommentsError, CommentServiceGetCommentCountForProjectData, CommentServiceGetCommentCountForProjectResponse, CommentServiceGetCommentCountForProjectError, CommentServiceGetUserCommentsData, CommentServiceGetUserCommentsResponse, CommentServiceSearchCommentsData, CommentServiceSearchCommentsResponse, CommentServiceSearchCommentsError, BadgeServiceGetAllBadgesData, BadgeServiceGetAllBadgesResponse, BadgeServiceGetProjectBadgesData, BadgeServiceGetProjectBadgesResponse, BadgeServiceGetProjectBadgesError, BadgeServiceGetUserBadgesData, BadgeServiceGetUserBadgesResponse, BadgeServiceGetUserBadgesError, BadgeServiceSetFeaturedBadgeData, BadgeServiceSetFeaturedBadgeResponse, BadgeServiceSetFeaturedBadgeError, BadgeServiceRecalculateBadgesData, BadgeServiceRecalculateBadgesResponse, RegistrationServiceCheckUsernameAvailabilityData, RegistrationServiceCheckUsernameAvailabilityResponse, RegistrationServiceCheckUsernameAvailabilityError, RegistrationServiceCheckEmailAvailabilityData, RegistrationServiceCheckEmailAvailabilityResponse, RegistrationServiceCheckEmailAvailabilityError, RegistrationServiceValidatePasswordData, RegistrationServiceValidatePasswordResponse, RegistrationServiceValidatePasswordError, RegistrationServiceRegisterUserData, RegistrationServiceRegisterUserResponse, RegistrationServiceRegisterUserError, RegistrationServiceSendVerificationEmailData, RegistrationServiceSendVerificationEmailResponse, RegistrationServiceSendVerificationEmailError, RegistrationServiceVerifyEmailData, RegistrationServiceVerifyEmailResponse, RegistrationServiceVerifyEmailError, RegistrationServiceGetRegistrationStatsData, RegistrationServiceGetRegistrationStatsResponse, RegistrationServiceUpdateUserProfileData, RegistrationServiceUpdateUserProfileResponse, RegistrationServiceUpdateUserProfileError } from './types.gen';
import { client as _heyApiClient } from './client.gen';

/**
 * Project Service Get All Projects
 * Get all projects for public viewing.
 */
export const projectServiceGetAllProjects = <ThrowOnError extends boolean = false>(options?: Options<ProjectServiceGetAllProjectsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<ProjectServiceGetAllProjectsResponse, unknown, ThrowOnError>({
        url: '/api/project_service/get_all_projects',
        ...options
    });
};

/**
 * Project Service Get Project By Id
 * Get a specific project by ID.
 */
export const projectServiceGetProjectById = <ThrowOnError extends boolean = false>(options: Options<ProjectServiceGetProjectByIdData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<ProjectServiceGetProjectByIdResponse, ProjectServiceGetProjectByIdError, ThrowOnError>({
        url: '/api/project_service/get_project_by_id',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Project Service Get Featured Projects
 * Get featured projects based on vote count and recent activity.
 */
export const projectServiceGetFeaturedProjects = <ThrowOnError extends boolean = false>(options: Options<ProjectServiceGetFeaturedProjectsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<ProjectServiceGetFeaturedProjectsResponse, ProjectServiceGetFeaturedProjectsError, ThrowOnError>({
        url: '/api/project_service/get_featured_projects',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Project Service Search Projects
 * Search projects by title, description, or tags.
 */
export const projectServiceSearchProjects = <ThrowOnError extends boolean = false>(options: Options<ProjectServiceSearchProjectsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<ProjectServiceSearchProjectsResponse, ProjectServiceSearchProjectsError, ThrowOnError>({
        url: '/api/project_service/search_projects',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Project Service Get Projects By Category
 * Get projects filtered by category.
 */
export const projectServiceGetProjectsByCategory = <ThrowOnError extends boolean = false>(options: Options<ProjectServiceGetProjectsByCategoryData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<ProjectServiceGetProjectsByCategoryResponse, ProjectServiceGetProjectsByCategoryError, ThrowOnError>({
        url: '/api/project_service/get_projects_by_category',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Project Service Create Project
 * Create a new project.
 */
export const projectServiceCreateProject = <ThrowOnError extends boolean = false>(options: Options<ProjectServiceCreateProjectData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<ProjectServiceCreateProjectResponse, ProjectServiceCreateProjectError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/project_service/create_project',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Project Service Update Project
 * Update an existing project (only by owner).
 */
export const projectServiceUpdateProject = <ThrowOnError extends boolean = false>(options: Options<ProjectServiceUpdateProjectData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<ProjectServiceUpdateProjectResponse, ProjectServiceUpdateProjectError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/project_service/update_project',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Project Service Delete Project
 * Delete a project (only by owner).
 */
export const projectServiceDeleteProject = <ThrowOnError extends boolean = false>(options: Options<ProjectServiceDeleteProjectData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<ProjectServiceDeleteProjectResponse, ProjectServiceDeleteProjectError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/project_service/delete_project',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Project Service Get Project Statistics
 * Get statistics for a project including votes, donations, comments.
 */
export const projectServiceGetProjectStatistics = <ThrowOnError extends boolean = false>(options: Options<ProjectServiceGetProjectStatisticsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<ProjectServiceGetProjectStatisticsResponse, ProjectServiceGetProjectStatisticsError, ThrowOnError>({
        url: '/api/project_service/get_project_statistics',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Voting Service Vote For Project
 * Vote for a project (one vote per user per project).
 */
export const votingServiceVoteForProject = <ThrowOnError extends boolean = false>(options: Options<VotingServiceVoteForProjectData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<VotingServiceVoteForProjectResponse, VotingServiceVoteForProjectError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/voting_service/vote_for_project',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Voting Service Remove Vote For Project
 * Remove vote for a project.
 */
export const votingServiceRemoveVoteForProject = <ThrowOnError extends boolean = false>(options: Options<VotingServiceRemoveVoteForProjectData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<VotingServiceRemoveVoteForProjectResponse, VotingServiceRemoveVoteForProjectError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/voting_service/remove_vote_for_project',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Voting Service Has User Voted
 * Check if user has voted for a specific project.
 */
export const votingServiceHasUserVoted = <ThrowOnError extends boolean = false>(options: Options<VotingServiceHasUserVotedData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<VotingServiceHasUserVotedResponse, VotingServiceHasUserVotedError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/voting_service/has_user_voted',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Voting Service Get Project Vote Count
 * Get the total vote count for a project.
 */
export const votingServiceGetProjectVoteCount = <ThrowOnError extends boolean = false>(options: Options<VotingServiceGetProjectVoteCountData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<VotingServiceGetProjectVoteCountResponse, VotingServiceGetProjectVoteCountError, ThrowOnError>({
        url: '/api/voting_service/get_project_vote_count',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Voting Service Get User Votes
 * Get all votes by a user.
 */
export const votingServiceGetUserVotes = <ThrowOnError extends boolean = false>(options?: Options<VotingServiceGetUserVotesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<VotingServiceGetUserVotesResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/voting_service/get_user_votes',
        ...options
    });
};

/**
 * Voting Service Get Project Voters
 * Get recent voters for a project (for displaying).
 */
export const votingServiceGetProjectVoters = <ThrowOnError extends boolean = false>(options: Options<VotingServiceGetProjectVotersData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<VotingServiceGetProjectVotersResponse, VotingServiceGetProjectVotersError, ThrowOnError>({
        url: '/api/voting_service/get_project_voters',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Donation Service Create Donation
 * Create a donation for a project.
 */
export const donationServiceCreateDonation = <ThrowOnError extends boolean = false>(options: Options<DonationServiceCreateDonationData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<DonationServiceCreateDonationResponse, DonationServiceCreateDonationError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/donation_service/create_donation',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Donation Service Get Project Donations
 * Get donations for a project.
 */
export const donationServiceGetProjectDonations = <ThrowOnError extends boolean = false>(options: Options<DonationServiceGetProjectDonationsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<DonationServiceGetProjectDonationsResponse, DonationServiceGetProjectDonationsError, ThrowOnError>({
        url: '/api/donation_service/get_project_donations',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Donation Service Get Donation Statistics
 * Get donation statistics for a project.
 */
export const donationServiceGetDonationStatistics = <ThrowOnError extends boolean = false>(options: Options<DonationServiceGetDonationStatisticsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<DonationServiceGetDonationStatisticsResponse, DonationServiceGetDonationStatisticsError, ThrowOnError>({
        url: '/api/donation_service/get_donation_statistics',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Donation Service Get User Donations
 * Get all donations made by a user.
 */
export const donationServiceGetUserDonations = <ThrowOnError extends boolean = false>(options?: Options<DonationServiceGetUserDonationsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<DonationServiceGetUserDonationsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/donation_service/get_user_donations',
        ...options
    });
};

/**
 * Donation Service Get Recent Donations
 * Get recent donations across all projects (excluding anonymous ones).
 */
export const donationServiceGetRecentDonations = <ThrowOnError extends boolean = false>(options: Options<DonationServiceGetRecentDonationsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<DonationServiceGetRecentDonationsResponse, DonationServiceGetRecentDonationsError, ThrowOnError>({
        url: '/api/donation_service/get_recent_donations',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Donation Service Get Top Donors For Project
 * Get top donors for a project (excluding anonymous).
 */
export const donationServiceGetTopDonorsForProject = <ThrowOnError extends boolean = false>(options: Options<DonationServiceGetTopDonorsForProjectData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<DonationServiceGetTopDonorsForProjectResponse, DonationServiceGetTopDonorsForProjectError, ThrowOnError>({
        url: '/api/donation_service/get_top_donors_for_project',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Donation Service Get User Donation Total
 * Get total amount donated by a user.
 */
export const donationServiceGetUserDonationTotal = <ThrowOnError extends boolean = false>(options?: Options<DonationServiceGetUserDonationTotalData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<DonationServiceGetUserDonationTotalResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/donation_service/get_user_donation_total',
        ...options
    });
};

/**
 * Timeline Service Get Project Timeline
 * Get timeline items for a project, ordered by order_index.
 */
export const timelineServiceGetProjectTimeline = <ThrowOnError extends boolean = false>(options: Options<TimelineServiceGetProjectTimelineData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<TimelineServiceGetProjectTimelineResponse, TimelineServiceGetProjectTimelineError, ThrowOnError>({
        url: '/api/timeline_service/get_project_timeline',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Timeline Service Create Timeline Item
 * Create a new timeline item for a project.
 */
export const timelineServiceCreateTimelineItem = <ThrowOnError extends boolean = false>(options: Options<TimelineServiceCreateTimelineItemData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<TimelineServiceCreateTimelineItemResponse, TimelineServiceCreateTimelineItemError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/timeline_service/create_timeline_item',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Timeline Service Update Timeline Item
 * Update a timeline item (only by project owner).
 */
export const timelineServiceUpdateTimelineItem = <ThrowOnError extends boolean = false>(options: Options<TimelineServiceUpdateTimelineItemData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<TimelineServiceUpdateTimelineItemResponse, TimelineServiceUpdateTimelineItemError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/timeline_service/update_timeline_item',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Timeline Service Delete Timeline Item
 * Delete a timeline item (only by project owner).
 */
export const timelineServiceDeleteTimelineItem = <ThrowOnError extends boolean = false>(options: Options<TimelineServiceDeleteTimelineItemData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<TimelineServiceDeleteTimelineItemResponse, TimelineServiceDeleteTimelineItemError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/timeline_service/delete_timeline_item',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Timeline Service Reorder Timeline Items
 * Reorder timeline items for a project.
 */
export const timelineServiceReorderTimelineItems = <ThrowOnError extends boolean = false>(options: Options<TimelineServiceReorderTimelineItemsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<TimelineServiceReorderTimelineItemsResponse, TimelineServiceReorderTimelineItemsError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/timeline_service/reorder_timeline_items',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Timeline Service Get Timeline Item By Id
 * Get a specific timeline item by ID.
 */
export const timelineServiceGetTimelineItemById = <ThrowOnError extends boolean = false>(options: Options<TimelineServiceGetTimelineItemByIdData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<TimelineServiceGetTimelineItemByIdResponse, TimelineServiceGetTimelineItemByIdError, ThrowOnError>({
        url: '/api/timeline_service/get_timeline_item_by_id',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Timeline Service Get Recent Timeline Activity
 * Get recent timeline activity across all projects.
 */
export const timelineServiceGetRecentTimelineActivity = <ThrowOnError extends boolean = false>(options: Options<TimelineServiceGetRecentTimelineActivityData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<TimelineServiceGetRecentTimelineActivityResponse, TimelineServiceGetRecentTimelineActivityError, ThrowOnError>({
        url: '/api/timeline_service/get_recent_timeline_activity',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Comment Service Get Project Comments
 * Get all comments for a project, ordered by creation date.
 */
export const commentServiceGetProjectComments = <ThrowOnError extends boolean = false>(options: Options<CommentServiceGetProjectCommentsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<CommentServiceGetProjectCommentsResponse, CommentServiceGetProjectCommentsError, ThrowOnError>({
        url: '/api/comment_service/get_project_comments',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Comment Service Get Timeline Item Comments
 * Get comments for a specific timeline item.
 */
export const commentServiceGetTimelineItemComments = <ThrowOnError extends boolean = false>(options: Options<CommentServiceGetTimelineItemCommentsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<CommentServiceGetTimelineItemCommentsResponse, CommentServiceGetTimelineItemCommentsError, ThrowOnError>({
        url: '/api/comment_service/get_timeline_item_comments',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Comment Service Get Threaded Comments
 * Get threaded comments for a project or timeline item.
 */
export const commentServiceGetThreadedComments = <ThrowOnError extends boolean = false>(options: Options<CommentServiceGetThreadedCommentsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<CommentServiceGetThreadedCommentsResponse, CommentServiceGetThreadedCommentsError, ThrowOnError>({
        url: '/api/comment_service/get_threaded_comments',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Comment Service Create Comment
 * Create a new comment on a project or timeline item.
 */
export const commentServiceCreateComment = <ThrowOnError extends boolean = false>(options: Options<CommentServiceCreateCommentData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<CommentServiceCreateCommentResponse, CommentServiceCreateCommentError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/comment_service/create_comment',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Comment Service Update Comment
 * Update a comment (only by the comment author).
 */
export const commentServiceUpdateComment = <ThrowOnError extends boolean = false>(options: Options<CommentServiceUpdateCommentData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<CommentServiceUpdateCommentResponse, CommentServiceUpdateCommentError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/comment_service/update_comment',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Comment Service Delete Comment
 * Delete a comment (only by the comment author or project owner).
 */
export const commentServiceDeleteComment = <ThrowOnError extends boolean = false>(options: Options<CommentServiceDeleteCommentData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<CommentServiceDeleteCommentResponse, CommentServiceDeleteCommentError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/comment_service/delete_comment',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Comment Service Get Recent Comments
 * Get recent comments across all projects.
 */
export const commentServiceGetRecentComments = <ThrowOnError extends boolean = false>(options: Options<CommentServiceGetRecentCommentsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<CommentServiceGetRecentCommentsResponse, CommentServiceGetRecentCommentsError, ThrowOnError>({
        url: '/api/comment_service/get_recent_comments',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Comment Service Get Comment Count For Project
 * Get total comment count for a project.
 */
export const commentServiceGetCommentCountForProject = <ThrowOnError extends boolean = false>(options: Options<CommentServiceGetCommentCountForProjectData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<CommentServiceGetCommentCountForProjectResponse, CommentServiceGetCommentCountForProjectError, ThrowOnError>({
        url: '/api/comment_service/get_comment_count_for_project',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Comment Service Get User Comments
 * Get all comments made by a user.
 */
export const commentServiceGetUserComments = <ThrowOnError extends boolean = false>(options?: Options<CommentServiceGetUserCommentsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<CommentServiceGetUserCommentsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/comment_service/get_user_comments',
        ...options
    });
};

/**
 * Comment Service Search Comments
 * Search comments by content.
 */
export const commentServiceSearchComments = <ThrowOnError extends boolean = false>(options: Options<CommentServiceSearchCommentsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<CommentServiceSearchCommentsResponse, CommentServiceSearchCommentsError, ThrowOnError>({
        url: '/api/comment_service/search_comments',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Badge Service Get All Badges
 * Get all available badges in the system.
 */
export const badgeServiceGetAllBadges = <ThrowOnError extends boolean = false>(options?: Options<BadgeServiceGetAllBadgesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<BadgeServiceGetAllBadgesResponse, unknown, ThrowOnError>({
        url: '/api/badge_service/get_all_badges',
        ...options
    });
};

/**
 * Badge Service Get Project Badges
 * Get all badges for a specific project with badge details.
 */
export const badgeServiceGetProjectBadges = <ThrowOnError extends boolean = false>(options: Options<BadgeServiceGetProjectBadgesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<BadgeServiceGetProjectBadgesResponse, BadgeServiceGetProjectBadgesError, ThrowOnError>({
        url: '/api/badge_service/get_project_badges',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Badge Service Get User Badges
 * Get all badges for a specific user with badge details.
 */
export const badgeServiceGetUserBadges = <ThrowOnError extends boolean = false>(options: Options<BadgeServiceGetUserBadgesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<BadgeServiceGetUserBadgesResponse, BadgeServiceGetUserBadgesError, ThrowOnError>({
        url: '/api/badge_service/get_user_badges',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Badge Service Set Featured Badge
 * Set a badge as featured for a user&#39;s profile.
 */
export const badgeServiceSetFeaturedBadge = <ThrowOnError extends boolean = false>(options: Options<BadgeServiceSetFeaturedBadgeData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<BadgeServiceSetFeaturedBadgeResponse, BadgeServiceSetFeaturedBadgeError, ThrowOnError>({
        url: '/api/badge_service/set_featured_badge',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Badge Service Recalculate Badges
 * Recalculate all badges for all users and projects (admin function).
 */
export const badgeServiceRecalculateBadges = <ThrowOnError extends boolean = false>(options?: Options<BadgeServiceRecalculateBadgesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<BadgeServiceRecalculateBadgesResponse, unknown, ThrowOnError>({
        url: '/api/badge_service/recalculate_badges',
        ...options
    });
};

/**
 * Registration Service Check Username Availability
 * Check if a username is available and valid.
 */
export const registrationServiceCheckUsernameAvailability = <ThrowOnError extends boolean = false>(options: Options<RegistrationServiceCheckUsernameAvailabilityData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<RegistrationServiceCheckUsernameAvailabilityResponse, RegistrationServiceCheckUsernameAvailabilityError, ThrowOnError>({
        url: '/api/registration_service/check_username_availability',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Registration Service Check Email Availability
 * Check if an email is available and valid.
 */
export const registrationServiceCheckEmailAvailability = <ThrowOnError extends boolean = false>(options: Options<RegistrationServiceCheckEmailAvailabilityData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<RegistrationServiceCheckEmailAvailabilityResponse, RegistrationServiceCheckEmailAvailabilityError, ThrowOnError>({
        url: '/api/registration_service/check_email_availability',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Registration Service Validate Password
 * Validate password strength.
 */
export const registrationServiceValidatePassword = <ThrowOnError extends boolean = false>(options: Options<RegistrationServiceValidatePasswordData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<RegistrationServiceValidatePasswordResponse, RegistrationServiceValidatePasswordError, ThrowOnError>({
        url: '/api/registration_service/validate_password',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Registration Service Register User
 * Register a new user account.
 */
export const registrationServiceRegisterUser = <ThrowOnError extends boolean = false>(options: Options<RegistrationServiceRegisterUserData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<RegistrationServiceRegisterUserResponse, RegistrationServiceRegisterUserError, ThrowOnError>({
        url: '/api/registration_service/register_user',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Registration Service Send Verification Email
 * Send email verification (simulated for now).
 */
export const registrationServiceSendVerificationEmail = <ThrowOnError extends boolean = false>(options: Options<RegistrationServiceSendVerificationEmailData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<RegistrationServiceSendVerificationEmailResponse, RegistrationServiceSendVerificationEmailError, ThrowOnError>({
        url: '/api/registration_service/send_verification_email',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Registration Service Verify Email
 * Verify user email address (simulated for now).
 */
export const registrationServiceVerifyEmail = <ThrowOnError extends boolean = false>(options: Options<RegistrationServiceVerifyEmailData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<RegistrationServiceVerifyEmailResponse, RegistrationServiceVerifyEmailError, ThrowOnError>({
        url: '/api/registration_service/verify_email',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Registration Service Get Registration Stats
 * Get registration statistics for admin dashboard.
 */
export const registrationServiceGetRegistrationStats = <ThrowOnError extends boolean = false>(options?: Options<RegistrationServiceGetRegistrationStatsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<RegistrationServiceGetRegistrationStatsResponse, unknown, ThrowOnError>({
        url: '/api/registration_service/get_registration_stats',
        ...options
    });
};

/**
 * Registration Service Update User Profile
 * Update user profile information.
 */
export const registrationServiceUpdateUserProfile = <ThrowOnError extends boolean = false>(options: Options<RegistrationServiceUpdateUserProfileData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<RegistrationServiceUpdateUserProfileResponse, RegistrationServiceUpdateUserProfileError, ThrowOnError>({
        url: '/api/registration_service/update_user_profile',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};